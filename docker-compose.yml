version: '3.9'

services:
  backend:
    image: python:3.11-slim
    working_dir: /app/backend
    volumes:
      - ./backend:/app/backend
    env_file:
      - backend/.env
    command: bash -c "pip install --no-cache-dir -r requirements.txt && uvicorn app.main:app --host 0.0.0.0 --port 8000"
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/path=/metrics"
      - "prometheus.io/port=8000"
version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: rbok-postgres
    environment:
      POSTGRES_USER: rbok
      POSTGRES_PASSWORD: rbok
      POSTGRES_DB: rbok
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: rbok-redis
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: rbok-backend
    environment:
      BACKEND_PORT: ${BACKEND_PORT:-8000}
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://rbok:rbok@postgres:5432/rbok}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/path=/metrics"
      - "prometheus.io/port=8000"

  ai_gateway:
    image: python:3.11-slim
    working_dir: /app/ai_gateway
    depends_on:
      - backend
    volumes:
      - ./ai_gateway:/app/ai_gateway
    env_file:
      - ai_gateway/.env
    command: bash -c "pip install --no-cache-dir -r requirements.txt && uvicorn main:app --host 0.0.0.0 --port 8010"
    ports:
      - "8010:8010"
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/path=/metrics"
      - "prometheus.io/port=8010"

  webapp:
    image: node:20-alpine
    working_dir: /app/webapp
    build:
      context: .
      dockerfile: ai_gateway/Dockerfile
    container_name: rbok-ai-gateway
    environment:
      AI_GATEWAY_PORT: ${AI_GATEWAY_PORT:-8100}
      AI_GATEWAY_BACKEND_BASE_URL: ${AI_GATEWAY_BACKEND_BASE_URL:-http://backend:8000}
      AI_GATEWAY_OPENAI_API_KEY: ${AI_GATEWAY_OPENAI_API_KEY:-changeme}
      AI_GATEWAY_ALLOWED_ORIGINS: ${AI_GATEWAY_ALLOWED_ORIGINS:-http://localhost:3000}
    depends_on:
      - backend
    volumes:
      - ./ai_gateway:/app
    command: uvicorn ai_gateway.main:app --host 0.0.0.0 --port 8100 --reload
    ports:
      - "8100:8100"

  webapp:
    build:
      context: .
      dockerfile: webapp/Dockerfile
      target: dev
    container_name: rbok-webapp
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_AI_GATEWAY_URL: ${NEXT_PUBLIC_AI_GATEWAY_URL:-http://localhost:8100}
      PORT: ${WEBAPP_PORT:-3000}
      HOST: 0.0.0.0
    depends_on:
      - backend
      - ai_gateway
    volumes:
      - ./webapp:/app/webapp
    env_file:
      - webapp/.env
    command: sh -c "npm install && npm run dev"
    ports:
      - "3000:3000"
      - ./webapp:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev -- --hostname 0.0.0.0 --port 3000
    ports:
      - "3000:3000"

volumes:
  postgres-data:
  redis-data:
