name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Prepare environment files
        env:
          BACKEND_SECRET: ${{ secrets.REALISONS_SECRET_KEY }}
          OPENAI_KEY: ${{ secrets.AI_GATEWAY_OPENAI_API_KEY }}
        run: |
          cp backend/.env.example backend/.env
          cp ai_gateway/.env.example ai_gateway/.env
          cp webapp/.env.example webapp/.env
          python - <<'PY'
import os
from pathlib import Path

backend_secret = os.environ.get("BACKEND_SECRET") or "ci-test-secret"
if backend_secret == "ci-test-secret":
    print("::warning::REALISONS_SECRET_KEY secret not provided; using CI fallback.")
backend_env = Path("backend/.env").read_text().splitlines()
backend_env = [
    "REALISONS_SECRET_KEY=" + backend_secret if line.startswith("REALISONS_SECRET_KEY=") else line
    for line in backend_env
]
Path("backend/.env").write_text("\n".join(backend_env) + "\n")

openai_key = os.environ.get("OPENAI_KEY") or "test-openai-key"
if openai_key == "test-openai-key":
    print("::warning::AI_GATEWAY_OPENAI_API_KEY secret not provided; using test key.")
ai_gateway_env = Path("ai_gateway/.env").read_text().splitlines()
ai_gateway_env = [
    "AI_GATEWAY_OPENAI_API_KEY=" + openai_key if line.startswith("AI_GATEWAY_OPENAI_API_KEY=") else line
    for line in ai_gateway_env
]
Path("ai_gateway/.env").write_text("\n".join(ai_gateway_env) + "\n")
PY
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  packages: write

jobs:
  backend-tests:
    name: Backend (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run backend tests
        working-directory: backend
        run: |
          mkdir -p reports
          pytest --maxfail=1 --disable-warnings --cov=app --cov-report=xml --junitxml=reports/pytest.xml

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-python-${{ matrix.python-version }}-reports
          path: |
            backend/coverage.xml
            backend/reports/pytest.xml

  ai-gateway-tests:
    name: AI Gateway (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: pip install -r backend/requirements.txt

      - name: Run backend tests
        env:
          PYTHONPATH: backend
        run: pytest backend/tests -q

      - name: Install AI Gateway dependencies
        run: pip install -r ai_gateway/requirements.txt

      - name: Run AI Gateway tests
        env:
          PYTHONPATH: ai_gateway
        run: pytest ai_gateway/tests -q
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: ai_gateway/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ai_gateway/requirements.txt

      - name: Run AI gateway tests
        working-directory: ai_gateway
        run: |
          mkdir -p reports
          pytest --maxfail=1 --disable-warnings --cov=ai_gateway --cov-report=xml --junitxml=reports/pytest.xml

      - name: Upload AI gateway artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-gateway-python-${{ matrix.python-version }}-reports
          path: |
            ai_gateway/coverage.xml
            ai_gateway/reports/pytest.xml

  webapp-tests:
    name: Webapp (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18", "20"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install webapp dependencies
        working-directory: webapp
        run: npm ci

      - name: Run webapp tests
        working-directory: webapp
        run: npm test -- --watch=false
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json

      - name: Install dependencies
        working-directory: webapp
        run: npm ci

      - name: Run lint
        working-directory: webapp
        run: npm run lint

      - name: Run tests
        working-directory: webapp
        run: |
          mkdir -p reports
          npm test -- --ci --coverage --json --outputFile=reports/jest-results.json

      - name: Upload webapp artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webapp-node-${{ matrix.node-version }}-reports
          path: |
            webapp/coverage
            webapp/reports/jest-results.json

  mobile-tests:
    name: Mobile (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        working-directory: mobile
        run: npm ci

      - name: Run tests
        working-directory: mobile
        run: |
          mkdir -p reports
          npm test -- --ci --coverage --json --outputFile=reports/jest-results.json

      - name: Upload mobile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-node-${{ matrix.node-version }}-reports
          path: |
            mobile/coverage
            mobile/reports/jest-results.json

  docker-build:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs:
      - backend-tests
      - ai-gateway-tests
      - webapp-tests
      - mobile-tests
    strategy:
      matrix:
        include:
          - service: backend
            context: backend
            dockerfile: backend/Dockerfile
            tag: rbok-backend
          - service: ai-gateway
            context: ai_gateway
            dockerfile: ai_gateway/Dockerfile
            tag: rbok-ai-gateway
          - service: webapp
            context: webapp
            dockerfile: webapp/Dockerfile
            tag: rbok-webapp
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          load: true
          tags: ${{ matrix.tag }}:ci

  docker-publish:
    name: Publish Docker images
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - service: backend
            context: backend
            dockerfile: backend/Dockerfile
            image: backend
          - service: ai-gateway
            context: ai_gateway
            dockerfile: ai_gateway/Dockerfile
            image: ai-gateway
          - service: webapp
            context: webapp
            dockerfile: webapp/Dockerfile
            image: webapp
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/rbok-${{ matrix.image }}:latest
