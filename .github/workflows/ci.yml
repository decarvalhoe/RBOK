name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  backend-tests:
    name: Backend (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests with coverage
        working-directory: backend
        run: |
          mkdir -p reports
          pytest --cov=app/services --cov-report=xml --cov-report=term-missing --junitxml=reports/pytest.xml

      - name: Upload backend reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-python-${{ matrix.python-version }}-reports
          path: |
            backend/coverage.xml
            backend/reports/pytest.xml

  ai-gateway-tests:
    name: AI Gateway (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            ai_gateway/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ai_gateway/requirements.txt

      - name: Run AI Gateway tests with coverage
        working-directory: ai_gateway
        run: |
          mkdir -p reports
          pytest --junitxml=reports/pytest.xml

      - name: Upload AI Gateway reports
        uses: actions/upload-artifact@v4
        with:
          name: ai-gateway-python-${{ matrix.python-version }}-reports
          path: |
            ai_gateway/coverage.xml
            ai_gateway/reports/pytest.xml

  webapp-tests:
    name: Webapp (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json

      - name: Install dependencies
        working-directory: webapp
        run: npm ci

      - name: Run webapp tests with coverage
        working-directory: webapp
        run: |
          mkdir -p reports
          npm run test:ci -- --json --outputFile=reports/jest-results.json

      - name: Upload webapp reports
        uses: actions/upload-artifact@v4
        with:
          name: webapp-node-${{ matrix.node-version }}-reports
          path: |
            webapp/coverage
            webapp/reports/jest-results.json

  mobile-tests:
    name: Mobile (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        working-directory: mobile
        run: npm ci

      - name: Run mobile tests with coverage
        working-directory: mobile
        run: |
          mkdir -p reports
          npm test -- --ci --coverage --json --outputFile=reports/jest-results.json

      - name: Upload mobile reports
        uses: actions/upload-artifact@v4
        with:
          name: mobile-node-${{ matrix.node-version }}-reports
          path: |
            mobile/coverage
            mobile/reports/jest-results.json

  docker-build:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs:
      - backend-tests
      - ai-gateway-tests
      - webapp-tests
      - mobile-tests
    strategy:
      matrix:
        include:
          - service: backend
            context: backend
            dockerfile: Dockerfile
            tag: rbok-backend
          - service: ai-gateway
            context: ai_gateway
            dockerfile: Dockerfile
            tag: rbok-ai-gateway
          - service: webapp
            context: .
            dockerfile: webapp/Dockerfile
            tag: rbok-webapp
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          load: true
          tags: ${{ matrix.tag }}:ci
